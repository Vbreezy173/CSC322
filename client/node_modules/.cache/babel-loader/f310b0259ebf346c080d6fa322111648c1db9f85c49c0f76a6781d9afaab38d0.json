{"ast":null,"code":"var _jsxFileName = \"/Users/veraldval/Desktop/GitHub/csc322/client/src/components/browse/commentSection.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './commentSection.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CommentSection = () => {\n  _s();\n  const [commenterName, setCommenterName] = useState('guest');\n  const [newComment, setNewComment] = useState('');\n  const [comments, setComments] = useState([]);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  // Save comments to localStorage\n  const saveCommentsToLocalStorage = comments => {\n    localStorage.setItem('comments', JSON.stringify(comments));\n  };\n\n  // Load comments from localStorage\n  const loadCommentsFromLocalStorage = () => {\n    const storedComments = localStorage.getItem('comments');\n    return storedComments ? JSON.parse(storedComments) : [];\n  };\n  useEffect(() => {\n    // Load comments from localStorage\n    const storedComments = loadCommentsFromLocalStorage();\n    setComments(storedComments);\n  }, []);\n  const handleNameChange = e => {\n    setCommenterName(e.target.value);\n    const name = e.target.value.slice(0, 30);\n    setCommenterName(name);\n  };\n  const handleCommentChange = e => {\n    const comment = e.target.value;\n    if (comment.length <= 500) {\n      setNewComment(comment);\n    } else {\n      setNewComment(comment.slice(0, 500));\n    }\n  };\n  const handleCommentSubmit = e => {\n    e.preventDefault();\n    let errorMessage = '';\n    if (commenterName.length < 3) {\n      errorMessage = 'Name must be at least 3 characters long.';\n    } else if (newComment.trim() === '') {\n      errorMessage = 'Comment cannot be blank.';\n    } else if (newComment.length > 500) {\n      errorMessage = 'Comment cannot be more than 500 characters.';\n    } else {\n      const updatedComments = [...comments, {\n        name: commenterName,\n        comment: newComment\n      }];\n      setComments(updatedComments);\n      setNewComment('');\n\n      // Save comments to localStorage\n      saveCommentsToLocalStorage(updatedComments);\n    }\n    setErrorMessage(errorMessage);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"heading\",\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleCommentSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"input-label\",\n        children: [\"Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"name-box\",\n          type: \"text\",\n          value: commenterName,\n          onChange: handleNameChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"input-label\",\n        children: [\"Comment:\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"comment-box\",\n          type: \"text\",\n          value: newComment,\n          onChange: handleCommentChange,\n          placeholder: \"500 charachters max\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"sumit-button\",\n        type: \"submit\",\n        children: \"Add Comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comment-section-container\",\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"comment-list\",\n        children: comments.map((comment, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"comment-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: comment.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 17\n          }, this), \": \", comment.comment]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(CommentSection, \"U+ohZMuV+jexPkh+XZQtpE5dG+Y=\");\n_c = CommentSection;\nexport default CommentSection;\nvar _c;\n$RefreshReg$(_c, \"CommentSection\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","CommentSection","_s","commenterName","setCommenterName","newComment","setNewComment","comments","setComments","errorMessage","setErrorMessage","saveCommentsToLocalStorage","localStorage","setItem","JSON","stringify","loadCommentsFromLocalStorage","storedComments","getItem","parse","handleNameChange","e","target","value","name","slice","handleCommentChange","comment","length","handleCommentSubmit","preventDefault","trim","updatedComments","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","placeholder","map","index","_c","$RefreshReg$"],"sources":["/Users/veraldval/Desktop/GitHub/csc322/client/src/components/browse/commentSection.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './commentSection.css';\n\nconst CommentSection = () => {\n  const [commenterName, setCommenterName] = useState('guest');\n  const [newComment, setNewComment] = useState('');\n  const [comments, setComments] = useState([]);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  // Save comments to localStorage\n  const saveCommentsToLocalStorage = (comments) => {\n    localStorage.setItem('comments', JSON.stringify(comments));\n  };\n\n  // Load comments from localStorage\n  const loadCommentsFromLocalStorage = () => {\n    const storedComments = localStorage.getItem('comments');\n    return storedComments ? JSON.parse(storedComments) : [];\n  };\n\n  useEffect(() => {\n    // Load comments from localStorage\n    const storedComments = loadCommentsFromLocalStorage();\n    setComments(storedComments);\n  }, []);\n\n  const handleNameChange = (e) => {\n    setCommenterName(e.target.value);\n    const name = e.target.value.slice(0, 30);\n    setCommenterName(name);\n  };\n\n  const handleCommentChange = (e) => {\n    const comment = e.target.value;\n    if (comment.length <= 500) {\n      setNewComment(comment);\n    } else {\n      setNewComment(comment.slice(0, 500));\n    }\n  };\n\n  const handleCommentSubmit = (e) => {\n    e.preventDefault();\n    let errorMessage = '';\n\n    if (commenterName.length < 3) {\n      errorMessage = 'Name must be at least 3 characters long.';\n    } else if (newComment.trim() === '') {\n      errorMessage = 'Comment cannot be blank.';\n    } else if (newComment.length > 500) {\n      errorMessage = 'Comment cannot be more than 500 characters.';\n    } else {\n      const updatedComments = [...comments, { name: commenterName, comment: newComment }];\n      setComments(updatedComments);\n      setNewComment('');\n\n      // Save comments to localStorage\n      saveCommentsToLocalStorage(updatedComments);\n    }\n\n    setErrorMessage(errorMessage);\n  };\n\n  return (\n    <div>\n      <h2 className='heading'>Comments</h2>\n      {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\n      <form onSubmit={handleCommentSubmit}>\n        <label className=\"input-label\">\n          Name:\n          <input\n            className=\"name-box\"\n            type=\"text\"\n            value={commenterName}\n            onChange={handleNameChange}\n          />\n        </label>\n        <br />\n        <label className=\"input-label\">\n          Comment:\n          <textarea\n            className=\"comment-box\"\n            type=\"text\"\n            value={newComment}\n            onChange={handleCommentChange}\n            placeholder=\"500 charachters max\"\n\n          />\n        </label>\n        <br />\n        <button className= 'sumit-button' type=\"submit\">Add Comment</button>\n      </form>\n      <div className=\"comment-section-container\">\n        <ul className=\"comment-list\">\n            {comments.map((comment, index) => (\n            <li key={index} className=\"comment-item\">\n                <strong>{comment.name}</strong>: {comment.comment}\n            </li>\n            ))}\n        </ul>\n       </div>\n    </div>\n  );\n};\n\nexport default CommentSection;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}