{"ast":null,"code":"var _jsxFileName = \"/Users/veraldval/Desktop/GitHub/csc322/client/src/components/ChatBox.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './ChatBox.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatBox() {\n  _s();\n  const [chatWindowDisplay, setChatWindowDisplay] = useState(false);\n  const [messages, setMessages] = useState([{\n    sender: 'Bot',\n    message: 'Hello! How may I help you?'\n  }]);\n  const [userInput, setUserInput] = useState('');\n  const toggleChatWindowDisplay = () => {\n    setChatWindowDisplay(!chatWindowDisplay);\n  };\n  const navigate = useNavigate();\n\n  // count for warning system\n  const [count, setCount] = useState(1);\n  const taboolist = [\"fuck\", \"bitch\", \"shit\", \"motherfucker\", \"fucker\", \"asshole\", \"cunt\", \"faggot\", \"bastard\", \"nigga\", \"fuc\", \"stfu\", \"gtfo\"];\n\n  //filter for users i.e.. replaces bad words with stars and sends\n  function filterBadWords(text) {\n    const regex = new RegExp(taboolist.join(\"|\"), \"gi\");\n    const cleanText = text.replace(regex, \"*****\");\n    return cleanText;\n  }\n\n  //filter for visitors i.e.. cannot send bad words at all\n  function Visitorfilter(text) {\n    const regex = new RegExp(taboolist.join(\"|\"), \"gi\");\n    const vfiltered = text.replace(regex, \"\");\n    return vfiltered;\n  }\n\n  // get login status\n  const loginstat = localStorage.getItem(\"LoginStatus\");\n  const handleUserInput = event => {\n    const usermessage = event.target.value;\n    setUserInput(usermessage);\n  };\n  const handleSendMessage = () => {\n    //if statement to prevent users from sending empty messages\n    if (userInput !== '') {\n      setMessages([...messages, {\n        sender: 'You',\n        message: userInput\n      }]);\n      setUserInput('');\n\n      // if (user is logged in == user is registered) {send bad word in ***s}\n      if (loginstat) {\n        setMessages([...messages, {\n          sender: 'You',\n          message: filterBadWords(userInput)\n        }]);\n        setUserInput('');\n      }\n\n      // else if(user is not logged in == user is not registered) {delete bad word message}\n      else {\n        // if visitor filter goes thru, it means visitor used bad word, so display \"cannot send\"\n        if (Visitorfilter(userInput) === \"\") {\n          setMessages([...messages, {\n            sender: /*#__PURE__*/_jsxDEV(\"em\", {\n              children: \"System\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 45\n            }, this),\n            message: /*#__PURE__*/_jsxDEV(\"em\", {\n              children: \"You cannot send that message\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 71\n            }, this)\n          }]);\n        }\n        // if no bad word, send\n        else {\n          setMessages([...messages, {\n            sender: 'You',\n            message: Visitorfilter(userInput)\n          }]);\n          setUserInput('');\n        }\n      }\n    }\n\n    // if user filter detects bad word, output has stars, count++ for warning\n    if (filterBadWords(userInput).includes(\"*****\")) {\n      setCount(prevCount => prevCount + 1);\n      console.log(count);\n\n      //send warning msg\n      if (count <= 3) {\n        setMessages([...messages, {\n          sender: 'You',\n          message: filterBadWords(userInput)\n        }, {\n          sender: /*#__PURE__*/_jsxDEV(\"em\", {\n            children: \"System\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 99\n          }, this),\n          message: /*#__PURE__*/_jsxDEV(\"em\", {\n            children: \"Warning Issued\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 125\n          }, this)\n        }]);\n        setUserInput('');\n      }\n\n      //get kicked if warning >3\n      if (count > 3) {\n        navigate('/kicked');\n      }\n    }\n  };\n  const handleKeyDown = event => {\n    // Send message if Enter key is pressed\n    if (event.keyCode === 13) {\n      handleSendMessage();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"chat-bot\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chat-icon\",\n      onClick: toggleChatWindowDisplay,\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: require('../img/chat_employee.png'),\n        alt: \"Chat Icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chat-window\",\n      style: {\n        display: chatWindowDisplay ? 'block' : 'none'\n      },\n      children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [message.sender, \": \", message.message]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"chat-input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"chat-input\",\n          placeholder: \"Ask a question...\",\n          value: userInput,\n          onChange: handleUserInput,\n          onKeyDown: handleKeyDown\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"chat-send-button\",\n          onClick: handleSendMessage,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatBox, \"+sd+lD4WQk5vxUvTH0MLmtRzVLo=\", false, function () {\n  return [useNavigate];\n});\n_c = ChatBox;\nexport default ChatBox;\nvar _c;\n$RefreshReg$(_c, \"ChatBox\");","map":{"version":3,"names":["React","useState","useNavigate","jsxDEV","_jsxDEV","ChatBox","_s","chatWindowDisplay","setChatWindowDisplay","messages","setMessages","sender","message","userInput","setUserInput","toggleChatWindowDisplay","navigate","count","setCount","taboolist","filterBadWords","text","regex","RegExp","join","cleanText","replace","Visitorfilter","vfiltered","loginstat","localStorage","getItem","handleUserInput","event","usermessage","target","value","handleSendMessage","children","fileName","_jsxFileName","lineNumber","columnNumber","includes","prevCount","console","log","handleKeyDown","keyCode","id","onClick","src","require","alt","style","display","map","index","className","type","placeholder","onChange","onKeyDown","_c","$RefreshReg$"],"sources":["/Users/veraldval/Desktop/GitHub/csc322/client/src/components/ChatBox.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport './ChatBox.css'\n\nfunction ChatBox() {\n  const [chatWindowDisplay, setChatWindowDisplay] = useState(false);\n  const [messages, setMessages] = useState([\n    { sender: 'Bot', message: 'Hello! How may I help you?' }\n  ]);\n  const [userInput, setUserInput] = useState('');\n\n  const toggleChatWindowDisplay = () => {\n    setChatWindowDisplay(!chatWindowDisplay);\n  };\n\n  const navigate = useNavigate();\n\n  // count for warning system\n  const [count, setCount] = useState(1);\n\n  const taboolist = [\"fuck\", \"bitch\", \"shit\", \"motherfucker\", \"fucker\", \"asshole\", \"cunt\", \"faggot\", \"bastard\", \"nigga\", \"fuc\", \"stfu\", \"gtfo\"]; \n\n    //filter for users i.e.. replaces bad words with stars and sends\n  function filterBadWords(text) {\n    const regex = new RegExp(taboolist.join(\"|\"), \"gi\");\n    const cleanText = text.replace(regex, \"*****\"); \n    return cleanText;\n  }\n\n    //filter for visitors i.e.. cannot send bad words at all\n    function Visitorfilter(text) {\n      const regex = new RegExp(taboolist.join(\"|\"), \"gi\");\n      const vfiltered = text.replace(regex, \"\"); \n      return vfiltered;\n    }\n\n  // get login status\n  const loginstat = localStorage.getItem(\"LoginStatus\");\n\n  const handleUserInput = (event) => {\n    const usermessage = event.target.value;\n    setUserInput(usermessage);\n  };\n\n  const handleSendMessage = () => {\n    //if statement to prevent users from sending empty messages\n    if (userInput !== ''){\n    setMessages([...messages, { sender: 'You', message: userInput }]);\n    setUserInput('');\n\n    // if (user is logged in == user is registered) {send bad word in ***s}\n    if (loginstat)\n    {\n      setMessages([...messages, { sender: 'You', message: filterBadWords(userInput) }]);\n      setUserInput('');\n    }\n    \n    // else if(user is not logged in == user is not registered) {delete bad word message}\n    else\n    {\n      // if visitor filter goes thru, it means visitor used bad word, so display \"cannot send\"\n      if (Visitorfilter(userInput) === \"\")\n      {\n        setMessages([...messages, { sender: <em>System</em>, message: <em>You cannot send that message</em>}])\n      }\n      // if no bad word, send\n      else \n      {\n      setMessages([...messages, { sender: 'You', message: Visitorfilter(userInput) }]);\n      setUserInput('');\n    }}}\n\n    // if user filter detects bad word, output has stars, count++ for warning\n    if (filterBadWords(userInput).includes(\"*****\"))\n    {\n      setCount((prevCount) => prevCount + 1);\n      console.log(count);\n\n      //send warning msg\n      if (count <= 3)\n      {\n        setMessages([...messages, { sender: 'You', message: filterBadWords(userInput)}, { sender: <em>System</em>, message: <em>Warning Issued</em>}]);\n        setUserInput('');\n      }\n\n      //get kicked if warning >3\n      if (count > 3)\n      {\n       navigate('/kicked'); \n      }\n    }\n\n  };\n\n  const handleKeyDown = (event) => {\n    // Send message if Enter key is pressed\n    if (event.keyCode === 13) {\n      handleSendMessage();\n    }\n  };\n\n  return (\n    <div id=\"chat-bot\">\n      <div id=\"chat-icon\" onClick={toggleChatWindowDisplay}>\n        <img src={require('../img/chat_employee.png')} alt=\"Chat Icon\" />\n      </div>\n      <div id=\"chat-window\" style={{ display: chatWindowDisplay ? 'block' : 'none' }}>\n        {messages.map((message, index) => (\n          <div key={index} className=\"message\">\n            <p>{message.sender}: {message.message}</p>\n          </div>\n        ))}\n        <div id=\"chat-input-container\">\n          <input type=\"text\" id=\"chat-input\" placeholder=\"Ask a question...\" value={userInput} onChange={handleUserInput} onKeyDown={handleKeyDown} />\n          <button id=\"chat-send-button\" onClick={handleSendMessage}>Send</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ChatBox;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}